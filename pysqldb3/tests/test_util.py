import pandas as pd

from ..util import convert_geom_col, parse_table_string


class TestStringParser:
    def test_string_parser_basic_default_server_ms(self):
        server, database, schema, table = parse_table_string("example", "dbo", "MS")
        assert schema == "dbo"
        assert table == "example"

    def test_string_parser_basic_default_server_pg(self):
        server, database, schema, table = parse_table_string('example', "public", "PG")
        assert schema == "public"
        assert table == "example"

    def test_string_parser_schema_table_periods_ms(self):
        server, database, schema, table = parse_table_string('generic.example', "dbo", "MS")
        assert schema == 'generic'
        assert table == 'example'

    def test_string_parser_schema_table_periods_pg(self):
        server, database, schema, table = parse_table_string('generic.example', "public", "PG")
        assert schema == 'generic'
        assert table == 'example'

    def test_string_parser_server_schema_table_periods_ms(self):
        server, database, schema, table = parse_table_string('a.generic.example', "dbo", "MS")
        assert not server
        assert database == 'a'
        assert schema == 'generic'
        assert table == 'example'

    def test_string_parser_server_schema_table_periods_pg(self):
        server, database, schema, table = parse_table_string('a.generic.example', "public", "PG")
        assert not server
        assert database == 'a'
        assert schema == 'generic'
        assert table == 'example'

    def test_string_parser_basic_quotes_pg(self):
        server, database, schema, table = parse_table_string('hello.this."isan_example"', "public", "PG")
        assert not server
        assert database =='hello'
        assert schema == 'this'
        assert table == 'isan_example'

    def test_string_parser_basic_brackets_ms(self):
        server, database, schema, table = parse_table_string('hello.this.is.[an_example]', "dbo", "MS")
        assert server == 'hello'
        assert database == 'this'
        assert schema == 'is'
        assert table == 'an_example'

    def test_string_parser_period_in_quotes_pg(self):
        server, database, schema, table = parse_table_string('hello.this.is."a.n_example"', "public", "PG")
        assert server == 'hello'
        assert database == 'this'
        assert schema == 'is'
        assert table == 'a.n_example'

    def test_string_parser_period_in_brackets_ms(self):
        server, database, schema, table = parse_table_string('hello.this.is.[a.n_example]', "dbo", "MS")
        assert server == 'hello'
        assert database == 'this'
        assert schema == 'is'
        assert table == 'a.n_example'

    def test_string_parser_double_period_in_quotes_pg(self):
        server, database, schema, table = parse_table_string('"double.quotes"."an.example"', "public", "PG")
        assert schema == 'double.quotes'
        assert table == 'an.example'

    def test_string_parser_spaces_in_quotes_pg(self):
        server, database, schema, table = parse_table_string('working."is an example"', "public", "PG")
        assert schema == 'working'
        assert table == 'is an example'

    def test_string_parser_spaces_in_brackets_ms(self):
        server, database, schema, table = parse_table_string('hey.hello.this.[is an example]', "dbo", "MS")
        assert server =='hey'
        assert database == 'hello'
        assert schema == 'this'
        assert table == 'is an example'

    def test_string_parser_default_spaces_in_brackets_quotes_ms(self):
        server, database, schema, table = parse_table_string('hey.hello.this.["is an example"]', "dbo", "MS")
        assert server == 'hey'
        assert database == 'hello'
        assert schema == 'this'
        assert table == '"is an example"'

    def test_string_parser_capitalization_pg(self):
        server, database, schema, table = parse_table_string("this.isalowercase.example", "working", "PG")
        assert schema == "isalowercase"
        assert table == "example"

        server, database, schema, table = parse_table_string("this.isacapitalized.EXAMPLE", "working", "PG")
        assert schema == 'isacapitalized'
        assert table == 'example'

        server, database, schema, table = parse_table_string('hey.hello.THIS."IS AN EXAMPLE"', "working", "PG")
        assert server == 'hey'
        assert database=='hello'
        assert schema == 'this'
        assert table == 'IS AN EXAMPLE'

        server, database, schema, table = parse_table_string("CAPITALIZED.EXAMPLE", "working", "PG")
        assert schema == 'capitalized'
        assert table == 'example'

        server, database, schema, table = parse_table_string('test."EXAMPLE"', "working", "PG")
        assert schema == 'test'
        assert table == 'EXAMPLE'

        server, database, schema, table = parse_table_string('"TEST"."EXAMPLE"', "working", "PG")
        assert schema == 'TEST'
        assert table == 'EXAMPLE'

    def test_string_parser_capitalization_ms(self):
        server, database, schema, table = parse_table_string('test.EXAMPLE', "dbo", "MS")
        assert schema == 'test'
        assert table == 'example'

        server, database, schema, table = parse_table_string('test."EXAMPLE"', "dbo", "MS")
        assert schema == 'test'
        assert table == 'EXAMPLE'

        server, database, schema, table = parse_table_string('test.[EXAMPLE]', "dbo", "MS")
        assert schema == 'test'
        assert table == 'EXAMPLE'

        server, database, schema, table = parse_table_string('test.["EXAMPLE"]', "dbo", "MS")
        assert schema == 'test'
        assert table == '"EXAMPLE"'


class TestUtil:
    def test_wkt(self):
        # First Police Precinct Example
        data = [(1,

        df = pd.DataFrame(data, columns=["id", "geom"])
        converted_df = convert_geom_col(df)
        match_coords = set()
        wkt = "MULTIPOLYGON (((982616.6246337891 198679.9625854492, 982660.08203125 198669.5866088867, 982680.0684204102 198670.9069824219, 982782.9066162109 198677.7001953125, 982806.4891967773 198673.7631835938, 982829.225402832 198664.7670288086, 982849.5369873047 198651.1516113281, 982866.1610107422 198633.9697875977, 983021.4133911133 198499.9248046875, 983071.0751953125 198454.8461914062, 983165.7305908203 198376.673828125, 983181.8756103516 198364.7612304688, 983247.9219970703 198316.0310058594, 983265.7139892578 198303.2125854492, 983298.5189819336 198269.2001953125, 983312.7905883789 198249.6530151367, 983374.94921875 198193.8395996094, 983395.5758056641 198176.1002197266, 983665.1553955078 197909.9949951172, 983788.4852294922 197774.7712402344, 984011.5391845703 197508.1453857422, 984115.9401855469 197347.8084106445, 984213.6550292969 197188.3790283203, 984229.1654052734 197164.3214111328, 984240.6306152344 197149.5897827148, 984261.4180297852 197106.374206543, 984278.9044189453 197080.7088012695, 984282.4462280273 197083.0214233398, 984358.2708129883 197132.5294189453, 984360.20703125 197129.6641845703, 984368.8024291992 197116.9454345703, 984374.4255981445 197108.6220092773, 984377.9788208008 197108.3004150391, 984391.2236328125 197118.6384277344, 984385.265625 197128.424987793, 984382.1782226563 197133.4971923828, 984399.6224365234 197145.774230957, 984410.4459838867 197154.0122070312, 984421.2694091797 197162.2504272461, 984436.774597168 197176.1416015625, 985070.9658203125 196514.1310424805, 985030.6982421875 196477.4346313477, 984061.6229858398 195594.3049926758, 983903.8356323242 195400.4276123047, 983486.4639892578 194887.592590332, 982927.0477905273 194200.2239990234, 982534.6724243164 193790.7208251953, 982237.1456298828 193480.2064208984, 981770.6950073242 192582.9462280273, 981515.364440918 192091.7946166992, 981074.2158203125 191219.3392333984, 981066.0314331055 191203.1096191406, 981014.9285888672 191101.7728271484, 980969.2861938477 191011.2644042969, 981008.5933837891 189908.0128173828, 979564.5368041992 188810.5765991211, 978328.7186279297 188115.967590332, 977971.4100341797 188196.5106201172, 977853.108215332 188064.6534423828, 977791.9638061523 188106.0158081055, 977872.3342285156 188218.8436279297, 976912.3674316406 188435.2344360352, 974661.4465942383 188793.4025878906, 971312.3619995117 189709.4916381836, 970357.3693847656 191098.0862426758, 971922.9838256836 193996.7756347656, 972473.4891967773 195048.6718139648, 977064.5093994141 194895.257019043, 977219.1777954102 196031.5474243164, 977317.5665893555 196754.3837890625, 977485.8837890625 198057.4478149414, 977620.4661865234 199099.3461914062, 977696.8306274414 199589.9180297852, 977822.8884277344 200399.724609375, 977979.307434082 201404.573425293, 978247.7615966797 203129.1478271484, 978237.5222167969 203585.6724243164, 978286.957824707 204319.9786376953, 978289.2969970703 204347.0390014648, 978294.4904174805 204377.0355834961, 978302.3056030273 204416.7969970703, 978493.7618408203 205390.8656005859, 980309.0106201172 205061.9423828125, 981119.2348022461 204938.4725952148, 981291.9711914063 204912.1494140625, 981327.5126342773 204907.5660400391, 981658.6567993164 204866.526184082, 981868.4365844727 204840.1712036133, 982284.8696289063 204788.0256347656, 982777.2471923828 204726.8710327148, 983383.1251831055 204650.0798339844, 983469.1583862305 204638.9020385742, 983496.0895996094 204624.2136230469, 983522.7247924805 204608.1193847656, 983654.3975830078 204519.4827880859, 983864.6466064453 204382.7214355469, 984074.7216186523 204246.681640625, 984273.3397827148 204118.4732055664, 984494.3958129883 203975.5108032227, 984704.2313842773 203838.9462280273, 984912.3904418945 203704.0284423828, 985144.7882080078 203570.9841918945, 985125.0540161133 203540.3411865234, 984863.9291992188 203134.8532104492, 984579.3728027344 202692.7377929688, 984382.5982055664 202387.4038085938, 984290.6625976563 202244.7465820312, 984066.8508300781 201897.9067993164, 983855.1287841797 201569.065612793, 983727.7374267578 201372.4650268555, 983670.2014160156 201283.5051879883, 983546.4614257813 201091.6848144531, 983405.8154296875 200872.7022094727, 983270.7764282227 200662.7124023438, 983133.9426269531 200451.9846191406, 983086.2031860352 200378.9138183594, 982993.2540283203 200236.6340332031, 982870.541015625 200047.1986083984, 982747.6243896484 199856.3394165039, 982617.5920410156 199652.7703857422, 982500.8140258789 199466.4385986328, 982914.1628417969 199214.7233886719, 983124.7366333008 199090.7636108398, 983081.7512207031 199034.6416015625, 983060.3798217773 199008.0767822266, 982974.0260009766 198916.8872070312, 982903.3098144531 198842.2109985352, 982867.4110107422 198813.9104003906, 982828.6086425781 198789.107421875, 982787.440612793 198768.2216186523, 982744.5078125 198751.5582275391, 982736.8229980469 198749.4199829102, 982700.4689941406 198739.3043823242, 982658.5728149414 198709.6882324219, 982616.6246337891 198679.9625854492)))".split(' ')
        precision_count = 0
        converted_wkt = converted_df.iloc[0]["geom"].split(' ')
        for i in range(len(converted_wkt)):
            if wkt[i] != converted_wkt[i]:
                try:
                    match_coords.add(int(float(wkt[i])) == int(float(converted_wkt[i])))
                    precision_count += 1
                except:
                    print(i, wkt[i], converted_wkt[i])
                    match_coords.add(False)
            else:
                match_coords.add(True)
        print(f'\n\n{precision_count} coords needed to be converted to int to match')
        assert match_coords == set([True])
            # converted_df.iloc[0][
            #        "geom"]== "MULTIPOLYGON (((982616.6246337891 198679.9625854492, 982660.08203125 198669.5866088867, 982680.0684204102 198670.9069824219, 982782.9066162109 198677.7001953125, 982806.4891967773 198673.7631835938, 982829.225402832 198664.7670288086, 982849.5369873047 198651.1516113281, 982866.1610107422 198633.9697875977, 983021.4133911133 198499.9248046875, 983071.0751953125 198454.8461914062, 983165.7305908203 198376.673828125, 983181.8756103516 198364.7612304688, 983247.9219970703 198316.0310058594, 983265.7139892578 198303.2125854492, 983298.5189819336 198269.2001953125, 983312.7905883789 198249.6530151367, 983374.94921875 198193.8395996094, 983395.5758056641 198176.1002197266, 983665.1553955078 197909.9949951172, 983788.4852294922 197774.7712402344, 984011.5391845703 197508.1453857422, 984115.9401855469 197347.8084106445, 984213.6550292969 197188.3790283203, 984229.1654052734 197164.3214111328, 984240.6306152344 197149.5897827148, 984261.4180297852 197106.374206543, 984278.9044189453 197080.7088012695, 984282.4462280273 197083.0214233398, 984358.2708129883 197132.5294189453, 984360.20703125 197129.6641845703, 984368.8024291992 197116.9454345703, 984374.4255981445 197108.6220092773, 984377.9788208008 197108.3004150391, 984391.2236328125 197118.6384277344, 984385.265625 197128.424987793, 984382.1782226563 197133.4971923828, 984399.6224365234 197145.774230957, 984410.4459838867 197154.0122070312, 984421.2694091797 197162.2504272461, 984436.774597168 197176.1416015625, 985070.9658203125 196514.1310424805, 985030.6982421875 196477.4346313477, 984061.6229858398 195594.3049926758, 983903.8356323242 195400.4276123047, 983486.4639892578 194887.592590332, 982927.0477905273 194200.2239990234, 982534.6724243164 193790.7208251953, 982237.1456298828 193480.2064208984, 981770.6950073242 192582.9462280273, 981515.364440918 192091.7946166992, 981074.2158203125 191219.3392333984, 981066.0314331055 191203.1096191406, 981014.9285888672 191101.7728271484, 980969.2861938477 191011.2644042969, 981008.5933837891 189908.0128173828, 979564.5368041992 188810.5765991211, 978328.7186279297 188115.967590332, 977971.4100341797 188196.5106201172, 977853.108215332 188064.6534423828, 977791.9638061523 188106.0158081055, 977872.3342285156 188218.8436279297, 976912.3674316406 188435.2344360352, 974661.4465942383 188793.4025878906, 971312.3619995117 189709.4916381836, 970357.3693847656 191098.0862426758, 971922.9838256836 193996.7756347656, 972473.4891967773 195048.6718139648, 977064.5093994141 194895.257019043, 977219.1777954102 196031.5474243164, 977317.5665893555 196754.3837890625, 977485.8837890625 198057.4478149414, 977620.4661865234 199099.3461914062, 977696.8306274414 199589.9180297852, 977822.8884277344 200399.724609375, 977979.307434082 201404.573425293, 978247.7615966797 203129.1478271484, 978237.5222167969 203585.6724243164, 978286.957824707 204319.9786376953, 978289.2969970703 204347.0390014648, 978294.4904174805 204377.0355834961, 978302.3056030273 204416.7969970703, 978493.7618408203 205390.8656005859, 980309.0106201172 205061.9423828125, 981119.2348022461 204938.4725952148, 981291.9711914063 204912.1494140625, 981327.5126342773 204907.5660400391, 981658.6567993164 204866.526184082, 981868.4365844727 204840.1712036133, 982284.8696289063 204788.0256347656, 982777.2471923828 204726.8710327148, 983383.1251831055 204650.0798339844, 983469.1583862305 204638.9020385742, 983496.0895996094 204624.2136230469, 983522.7247924805 204608.1193847656, 983654.3975830078 204519.4827880859, 983864.6466064453 204382.7214355469, 984074.7216186523 204246.681640625, 984273.3397827148 204118.4732055664, 984494.3958129883 203975.5108032227, 984704.2313842773 203838.9462280273, 984912.3904418945 203704.0284423828, 985144.7882080078 203570.9841918945, 985125.0540161133 203540.3411865234, 984863.9291992188 203134.8532104492, 984579.3728027344 202692.7377929688, 984382.5982055664 202387.4038085938, 984290.6625976563 202244.7465820312, 984066.8508300781 201897.9067993164, 983855.1287841797 201569.065612793, 983727.7374267578 201372.4650268555, 983670.2014160156 201283.5051879883, 983546.4614257813 201091.6848144531, 983405.8154296875 200872.7022094727, 983270.7764282227 200662.7124023438, 983133.9426269531 200451.9846191406, 983086.2031860352 200378.9138183594, 982993.2540283203 200236.6340332031, 982870.541015625 200047.1986083984, 982747.6243896484 199856.3394165039, 982617.5920410156 199652.7703857422, 982500.8140258789 199466.4385986328, 982914.1628417969 199214.7233886719, 983124.7366333008 199090.7636108398, 983081.7512207031 199034.6416015625, 983060.3798217773 199008.0767822266, 982974.0260009766 198916.8872070312, 982903.3098144531 198842.2109985352, 982867.4110107422 198813.9104003906, 982828.6086425781 198789.107421875, 982787.440612793 198768.2216186523, 982744.5078125 198751.5582275391, 982736.8229980469 198749.4199829102, 982700.4689941406 198739.3043823242, 982658.5728149414 198709.6882324219, 982616.6246337891 198679.9625854492)))"
